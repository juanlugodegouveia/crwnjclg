{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\jlugo.ex\\\\Desktop\\\\crwnjclg\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDk3nlo7-F9VlULRI7q8sfsOxgP-_9jJE4\",\n  authDomain: \"shop-b6505.firebaseapp.com\",\n  databaseURL: \"https://shop-b6505.firebaseio.com\",\n  projectId: \"shop-b6505\",\n  storageBucket: \"\",\n  messagingSenderId: \"69539150471\",\n  appId: \"1:69539150471:web:97d2ccfc0b68b917f49622\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n  const snapShot = await userRef.get(); //  console.log(snapShot);\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('Error Creating User', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) => {\n  //Funcion para agregar colleciones a firebase, no la usamos mas. 157\n  const collectionRef = firestore.collection(collectionKey); // console.log(collectionRef);\n\n  const batch = firestore.batch(); //Recopilamos toda la consulta, una vez lista la ejecutamos\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); // console.log(newDocRef);\n\n    batch.set(newDocRef, obj); //Ingresamos el documento y la collecion a firebase\n  });\n  return await batch.commit();\n}; //Para agregar los objetos a firebase.\n\nexport const covertCollectionSnapShotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); // console.log(transformedCollection);\n\n  return transformedCollection.reduce((acumulator, collection) => {\n    acumulator[collection.title.toLowerCase()] = collection;\n    return acumulator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:\\Users\\jlugo.ex\\Desktop\\crwnjclg\\client\\src\\firebase\\firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionsAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","covertCollectionSnapShotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","acumulator","initializeApp","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDk3nlo7-F9VlULRI7q8sfsOxgP-_9jJE4\",\r\n    authDomain: \"shop-b6505.firebaseapp.com\",\r\n    databaseURL: \"https://shop-b6505.firebaseio.com\",\r\n    projectId: \"shop-b6505\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"69539150471\",\r\n    appId: \"1:69539150471:web:97d2ccfc0b68b917f49622\"\r\n  };\r\n\r\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if(!userAuth) return;\r\n\r\n     const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    \r\n     const snapShot = await userRef.get();\r\n\r\n    //  console.log(snapShot);\r\n\r\n    if(!snapShot.exists) {\r\n      const { displayName, email } = userAuth;\r\n      const createdAt = new Date();\r\n\r\n      try {\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          ...additionalData\r\n        })\r\n      } catch (error) {\r\n        console.log('Error Creating User', error.message);\r\n      }\r\n    }\r\n      return userRef;\r\n  };\r\n\r\n  export const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) => { //Funcion para agregar colleciones a firebase, no la usamos mas. 157\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    // console.log(collectionRef);\r\n\r\n    const batch = firestore.batch(); //Recopilamos toda la consulta, una vez lista la ejecutamos\r\n\r\n    objectsToAdd.forEach(obj => {\r\n      const newDocRef = collectionRef.doc();\r\n      // console.log(newDocRef);\r\n      batch.set(newDocRef, obj); //Ingresamos el documento y la collecion a firebase\r\n    });\r\n\r\n    return await batch.commit();\r\n  }; //Para agregar los objetos a firebase.\r\n\r\n  export const covertCollectionSnapShotToMap = (collections) => {\r\n    const transformedCollection = collections.docs.map(doc => {\r\n      const { title, items } = doc.data();\r\n\r\n      return {\r\n        routeName: encodeURI(title.toLowerCase()),\r\n        id: doc.id,\r\n        title,\r\n        items\r\n      }\r\n    });\r\n    // console.log(transformedCollection);\r\n    return transformedCollection.reduce((acumulator, collection) => {\r\n      acumulator[collection.title.toLowerCase()] = collection;\r\n      return acumulator;\r\n    } , {});\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n            unsubscribe();\r\n            resolve(userAuth);\r\n        }, reject);\r\n    });\r\n  };\r\n\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n\r\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n  googleProvider.setCustomParameters({ prompt: 'select_account'});\r\n  export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\n  export default firebase;"]},"metadata":{},"sourceType":"module"}